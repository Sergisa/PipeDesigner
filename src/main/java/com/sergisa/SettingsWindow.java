package com.sergisa;

import javax.swing.*;
import java.awt.*;

public class SettingsWindow extends JFrame {
    private JPanel root;
    private JComboBox<Stroke> gridLineSpinner;
    private JSpinner gridStepSpinner;
    private JButton colorChoose;
    private JSpinner linesCountSpinner;
    private JLabel colorExample;
    private final JColorChooser colorChooser;
    public EventManager eventManager;

    public SettingsWindow(String title) {
        $$$setupUI$$$();
        eventManager = new EventManager("gridStepChanged", "gridColorChanged");
        setTitle(title);
        setContentPane(root);
        setSize(400, 200);
        colorChooser = new JColorChooser();
        gridLineSpinner.setRenderer(new StrokeSelectionRenderer());
        float[] dashingPattern1 = {4f, 4f};
        gridLineSpinner.addItem(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1, dashingPattern1, 2));

        gridStepSpinner.setModel(new SpinnerNumberModel(Settings.getInstance().getGridStep(), 0, 30, 1));
        linesCountSpinner.setModel(new SpinnerNumberModel(Settings.getInstance().getLinesCount(), 0, 30, 1));
        linesCountSpinner.addChangeListener(e -> {
            int value = (int) ((JSpinner) e.getSource()).getValue();
            if (value >= 0) {
                Settings.getInstance().setLinesCount(value);
            }
        });
        gridStepSpinner.addChangeListener(e -> {
            int value = (int) ((JSpinner) e.getSource()).getValue();
            if (value >= 0) {
                Settings.getInstance().setGridStep(value);
            }
        });
        colorChoose.addActionListener(e -> {
            Color tmp = JColorChooser.showDialog(SettingsWindow.this, "Choose text color", Color.WHITE);
            colorExample.setForeground(tmp);
        });

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridBagLayout());
        final JLabel label1 = new JLabel();
        label1.setText("Тип сетки");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 1;
        gbc.ipady = 1;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(label1, gbc);
        gridLineSpinner = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 1;
        gbc.ipady = 1;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(gridLineSpinner, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Шаг сетки");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(label2, gbc);
        gridStepSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(gridStepSpinner, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Цвет сетки");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(label3, gbc);
        colorChoose = new JButton();
        colorChoose.setText("Выбрать");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(colorChoose, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Количество линий сетки");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(label4, gbc);
        linesCountSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 0, 5, 0);
        root.add(linesCountSpinner, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    static class StrokeSelectionRenderer extends JLabel implements ListCellRenderer<Stroke> {
        @Override
        public Component getListCellRendererComponent(JList<? extends Stroke> list, Stroke value, int index, boolean isSelected, boolean cellHasFocus) {


            return this;
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.drawLine(getHeight() / 2, 0, getWidth(), getHeight() / 2);
        }
    }
}
